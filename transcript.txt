Chez Scheme Transcript [Tue May 13 21:38:09 2014]
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1#f1#f1#f1(extended-env-record (x accum) #((1 2 3) ()) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp
break> (exit)
Invalid command.  Type ? for options.
break> q

> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1#f1#f1#f1(extended-env-record (x accum) #((1 2 3) ()) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))
break> q

> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1#f1#f1#f1(extended-env-record (x accum) #((1 2 3) ()) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) #((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) (
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1
Exception in cases:    Not a proc-val variant: 0.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))
Exception in cases:    Not a proc-val variant: 0.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
Exception in cases:    Not a proc-val variant: 0.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
Exception in for-each: lists (0 1 2) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
Exception in for-each: lists (0 1 2) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
Exception in for-each: lists (0 1) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in for-each: lists (0 1) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: #f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
((x y))

((x accum))
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x)

(x)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
Exception in letrec-exp:   Bad idss field ((list-of (list-of symbol?)) (x accum)) => #f.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
Exception in letrec-exp:   Bad idss field ((list-of (list-of symbol?)) (x accum)) => #f.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1
Exception: variable new-env is not bound
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1
Exception: variable enb is not bound
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in for-each: lists (0 1) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in for-each: lists (0 1) and ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...)))) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))
(0 1)
Exception in for-each: lists (0 1) and (if-else-exp (app-exp (var-exp null?) ((...))) (lit-exp (quote ())) (app-exp (letrec-exp (...) (...) (...) (...)) ((...) (...)))) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

(if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
(0 1)
Exception in for-each: lists (0 1) and (if-else-exp (app-exp (var-exp null?) ((...))) (lit-exp (quote ())) (app-exp (letrec-exp (...) (...) (...) (...)) ((...) (...)))) differ in length
Type (debug) to enter the debugger.
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

(if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
(0 1)
Exception in for-each: lists (0 1) and (if-else-exp (app-exp (var-exp null?) ((...))) (lit-exp (quote ())) (app-exp (letrec-exp (...) (...) (...) (...)) ((...) (...)))) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

4
(0 1)
Exception in for-each: lists (0 1) and (if-else-exp (app-exp (var-exp null?) ((...))) (lit-exp (quote ())) (app-exp (letrec-exp (...) (...) (...) (...)) ((...) (...)))) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '())))))

(0 1)
Exception in for-each: lists (0 1) and (if-else-exp (app-exp (var-exp null?) ((...))) (lit-exp (quote ())) (app-exp (letrec-exp (...) (...) (...) (...)) ((...) (...)))) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

(if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
Exception in cadr: incorrect list structure ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...))))
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

if-else-exp
Exception in caadr: incorrect list structure ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...))))
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

if-else-exp
()
Exception in caaddr: incorrect list structure ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...))))
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

(if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
()
Exception in caaddr: incorrect list structure ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...))))
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1#f1#f1(extended-env-record (product) #(0) (empty-env-record))

(product)

((x y))

(if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
((app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))
Exception in caaddr: incorrect list structure ((if-else-exp (app-exp (...) (...)) (lit-exp (...)) (app-exp (...) (...))))
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1
Exception in for-each: lists (0 1) and ((x y)) differ in length
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: 
(x y)

(x accum)
#f1
Exception in vector-set!: (0 1) is not a valid index for #(0)
Type (debug) to enter the debugger.
